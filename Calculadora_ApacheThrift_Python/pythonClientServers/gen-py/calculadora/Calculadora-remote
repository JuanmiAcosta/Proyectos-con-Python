#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from calculadora import Calculadora
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('  result suma(double num1, double num2)')
    print('  result resta(double num1, double num2)')
    print('  result multiplicacion(double num1, double num2)')
    print('  result division(double num1, double num2)')
    print('  result seno(double num)')
    print('  result coseno(double num)')
    print('  result tangente(double num)')
    print('  result convGradosRadianes(double grado)')
    print('  result convRadianesGrados(double radianes)')
    print('  void pingAlgebraica()')
    print('  result algEuclides(i64 num1, i64 num2)')
    print('  result2 algExtEuclides(i64 num1, i64 num2)')
    print('  result2 congLineal(i64 num1, i64 num2, i64 num3)')
    print('  result2 ecuDiofantica(i64 num1, i64 num2, i64 num3)')
    print('  result_vector sumaVectores( vec1,  vec2)')
    print('  result_vector productoEscalar( vec1,  vec2)')
    print('  result_vector productoCruz( vec1,  vec2)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'suma':
    if len(args) != 2:
        print('suma requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma(eval(args[0]), eval(args[1]),))

elif cmd == 'resta':
    if len(args) != 2:
        print('resta requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta(eval(args[0]), eval(args[1]),))

elif cmd == 'multiplicacion':
    if len(args) != 2:
        print('multiplicacion requires 2 args')
        sys.exit(1)
    pp.pprint(client.multiplicacion(eval(args[0]), eval(args[1]),))

elif cmd == 'division':
    if len(args) != 2:
        print('division requires 2 args')
        sys.exit(1)
    pp.pprint(client.division(eval(args[0]), eval(args[1]),))

elif cmd == 'seno':
    if len(args) != 1:
        print('seno requires 1 args')
        sys.exit(1)
    pp.pprint(client.seno(eval(args[0]),))

elif cmd == 'coseno':
    if len(args) != 1:
        print('coseno requires 1 args')
        sys.exit(1)
    pp.pprint(client.coseno(eval(args[0]),))

elif cmd == 'tangente':
    if len(args) != 1:
        print('tangente requires 1 args')
        sys.exit(1)
    pp.pprint(client.tangente(eval(args[0]),))

elif cmd == 'convGradosRadianes':
    if len(args) != 1:
        print('convGradosRadianes requires 1 args')
        sys.exit(1)
    pp.pprint(client.convGradosRadianes(eval(args[0]),))

elif cmd == 'convRadianesGrados':
    if len(args) != 1:
        print('convRadianesGrados requires 1 args')
        sys.exit(1)
    pp.pprint(client.convRadianesGrados(eval(args[0]),))

elif cmd == 'pingAlgebraica':
    if len(args) != 0:
        print('pingAlgebraica requires 0 args')
        sys.exit(1)
    pp.pprint(client.pingAlgebraica())

elif cmd == 'algEuclides':
    if len(args) != 2:
        print('algEuclides requires 2 args')
        sys.exit(1)
    pp.pprint(client.algEuclides(eval(args[0]), eval(args[1]),))

elif cmd == 'algExtEuclides':
    if len(args) != 2:
        print('algExtEuclides requires 2 args')
        sys.exit(1)
    pp.pprint(client.algExtEuclides(eval(args[0]), eval(args[1]),))

elif cmd == 'congLineal':
    if len(args) != 3:
        print('congLineal requires 3 args')
        sys.exit(1)
    pp.pprint(client.congLineal(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'ecuDiofantica':
    if len(args) != 3:
        print('ecuDiofantica requires 3 args')
        sys.exit(1)
    pp.pprint(client.ecuDiofantica(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sumaVectores':
    if len(args) != 2:
        print('sumaVectores requires 2 args')
        sys.exit(1)
    pp.pprint(client.sumaVectores(eval(args[0]), eval(args[1]),))

elif cmd == 'productoEscalar':
    if len(args) != 2:
        print('productoEscalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.productoEscalar(eval(args[0]), eval(args[1]),))

elif cmd == 'productoCruz':
    if len(args) != 2:
        print('productoCruz requires 2 args')
        sys.exit(1)
    pp.pprint(client.productoCruz(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
